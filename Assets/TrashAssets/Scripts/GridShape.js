
//---------- SHAPE TYPES ------------\\
//0: [ ]     1: [ ]    2:  [ ]
//   [ ]        [x]        [x]
//   [X]        [ ][ ]  [ ][ ]
//   [ ]
//
//3:   [ ][ ]  4: [ ][ ]    5:   [ ]
//  [ ][X]           [X][ ]   [ ][X][ ]
//
//6: [ ][ ]
//   [x][ ]
//-----------------------------------//


class GridShape
{
	//rotation: 0 = up, 1 = right, 2 = down, 3 = left
	function GridShape(shape:int, material:int, rotation:int, xVal:int, yVal:int)
	{
		m_shape = shape;
		m_material = material;
		m_rotation = rotation;
		m_x = xVal;
		m_y = yVal;
	}

	public function getGridBlocks()
	{
		return shapeTypes[m_shape][m_rotation];
	}

	public var m_shape:int;
	public var m_rotation:int;

	public var m_x:int;
	public var m_y:int;

	public var m_material:int;

}

//shapeTypes[shape][rotation][x][y]
//shape: 0 = line, 1 = L, 2 = reverse-L, 3 = S, 4 = reverse-S, 5 = T, 6 = square
//rotation: 0 = up, 1 = right, 2 = down, 3 = left
static var shapeTypes = //int
[
	//line
	[
		//right
		[
			[0,0,0,0,0],
			[0,0,0,0,0],
			[0,1,2,1,1],
			[0,0,0,0,0],
			[0,0,0,0,0]
		],
		//down
		[
			[0,0,1,0,0],
			[0,0,1,0,0],
			[0,0,2,0,0],
			[0,0,1,0,0],
			[0,0,0,0,0]
		],
		//left
		[
			[0,0,0,0,0],
			[0,0,0,0,0],
			[1,1,2,1,0],
			[0,0,0,0,0],
			[0,0,0,0,0]
		],
		//up
		[
			[0,0,1,0,0],
			[0,0,1,0,0],
			[0,0,2,0,0],
			[0,0,1,0,0],
			[0,0,0,0,0]
		]
	],
	//L
	[
		//right
		[
			[0,0,0,0,0],
			[0,0,0,0,0],
			[0,0,0,1,0],
			[0,1,2,1,0],
			[0,0,0,0,0]
		],
		//down
		[
			[0,0,0,0,0],
			[0,0,1,0,0],
			[0,0,2,0,0],
			[0,0,1,1,0],
			[0,0,0,0,0]
		],
		//left
		
		[
			[0,0,0,0,0],
			[0,0,0,0,0],
			[0,1,2,1,0],
			[0,1,0,0,0],
			[0,0,0,0,0]
		],
		//up
		[
			[0,0,0,0,0],
			[0,1,1,0,0],
			[0,0,2,0,0],
			[0,0,1,0,0],
			[0,0,0,0,0]
		]
		
	],
		//L reversed
	[
		//up
		[
			[0,0,0,0,0],
			[0,0,0,0,0],
			[0,1,0,0,0],
			[0,1,2,1,0],
			[0,0,0,0,0]
		],
		//right
		[
			[0,0,0,0,0],
			[0,0,1,1,0],
			[0,0,2,0,0],
			[0,0,1,0,0],
			[0,0,0,0,0]
		],
		//down
		[
			[0,0,0,0,0],
			[0,0,0,0,0],
			[0,1,2,1,0],
			[0,0,0,1,0],
			[0,0,0,0,0]
		],
		//left
		[
			[0,0,0,0,0],
			[0,0,1,0,0],
			[0,0,2,0,0],
			[0,1,1,0,0],
			[0,0,0,0,0]
		]
	],
		//S
	[
		//up
		[
			[0,0,0,0,0],
			[0,0,0,0,0],
			[0,0,2,1,0],
			[0,1,1,0,0],
			[0,0,0,0,0]
		],
		//right
		[
			[0,0,0,0,0],
			[0,1,0,0,0],
			[0,1,2,0,0],
			[0,0,1,0,0],
			[0,0,0,0,0]
		],
		//down
		[
			[0,0,0,0,0],
			[0,0,0,0,0],
			[0,0,1,1,0],
			[0,1,2,0,0],
			[0,0,0,0,0]
		],
		//left
		[
			[0,0,0,0,0],
			[0,1,0,0,0],
			[0,1,2,0,0],
			[0,0,1,0,0],
			[0,0,0,0,0]
		]
	],
		//S reversed
	[
		//up
		[
			[0,0,0,0,0],
			[0,0,0,0,0],
			[0,1,2,0,0],
			[0,0,1,1,0],
			[0,0,0,0,0]
		],
		//right
		[
			[0,0,0,0,0],
			[0,0,0,1,0],
			[0,0,1,2,0],
			[0,0,1,0,0],
			[0,0,0,0,0]
		],
		//down
		[
			[0,0,0,0,0],
			[0,0,0,0,0],
			[0,1,2,0,0],
			[0,0,1,1,0],
			[0,0,0,0,0]
		],
		//left
		[
			[0,0,0,0,0],
			[0,0,0,1,0],
			[0,0,2,1,0],
			[0,0,1,0,0],
			[0,0,0,0,0]
		]
	],
		//T
	[
		//up
		[
			[0,0,0,0,0],
			[0,0,0,0,0],
			[0,0,1,0,0],
			[0,1,2,1,0],
			[0,0,0,0,0]
		],
		//right
		[
			[0,0,0,0,0],
			[0,0,1,0,0],
			[0,0,2,1,0],
			[0,0,1,0,0],
			[0,0,0,0,0]
		],
		//down
		[
			[0,0,0,0,0],
			[0,0,0,0,0],
			[0,1,2,1,0],
			[0,0,1,0,0],
			[0,0,0,0,0]
		],
		//left
		[
			[0,0,0,0,0],
			[0,0,1,0,0],
			[0,1,2,0,0],
			[0,0,1,0,0],
			[0,0,0,0,0]
		]
	],
		//square
	[
		//up
		[
			[0,0,0,0,0],
			[0,0,0,0,0],
			[0,1,2,0,0],
			[0,1,1,0,0],
			[0,0,0,0,0]
		],
		//right
		[
			[0,0,0,0,0],
			[0,0,0,0,0],
			[0,1,2,0,0],
			[0,1,1,0,0],
			[0,0,0,0,0]
		],
		//down
		[
			[0,0,0,0,0],
			[0,0,0,0,0],
			[0,1,2,0,0],
			[0,1,1,0,0],
			[0,0,0,0,0]
		],
		//left
		[
			[0,0,0,0,0],
			[0,0,0,0,0],
			[0,1,2,0,0],
			[0,1,1,0,0],
			[0,0,0,0,0]
		]
	]
];
